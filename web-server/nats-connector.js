// Generated by LiveScript 1.5.0
(function(){
  var NATS, ref$, each, objToPairs, util, NatsConnector;
  NATS = require('nats');
  ref$ = require('prelude-ls'), each = ref$.each, objToPairs = ref$.objToPairs;
  util = require('util');
  NatsConnector = (function(){
    NatsConnector.displayName = 'NatsConnector';
    var prototype = NatsConnector.prototype, constructor = NatsConnector;
    function NatsConnector(){
      this.nats = NATS.connect("nats://" + process.env.NATS_HOST + ":4222");
      console.log("nats: connected");
    }
    NatsConnector.prototype.subscribeMapping = function(messageCallbackMapping){
      var this$ = this;
      return each(function(arg$){
        var name, callback;
        name = arg$[0], callback = arg$[1];
        return this$.nats.subscribe(name, function(requestDataStr, replyTo){
          var requestData;
          requestData = JSON.parse(requestDataStr);
          this$._log('received request for', name, requestData);
          return callback(requestData, {
            reply: function(replyData){
              this$._log('responding to', name, replyData);
              return this$.nats.publish(replyTo, JSON.stringify(replyData));
            }
          });
        });
      })(
      objToPairs(
      messageCallbackMapping));
    };
    NatsConnector.prototype.send = function(name, requestData, callback){
      var this$ = this;
      this._log('requesting', name, requestData);
      return this.nats.request(name, JSON.stringify(requestData), {
        max: 1
      }, function(responseDataStr){
        var responseData;
        responseData = JSON.parse(responseDataStr);
        this$._log('received response to', name, responseData);
        return callback(responseData);
      });
    };
    NatsConnector.prototype._log = function(prefix, name, data){
      return console.log('nats:', prefix, name, 'with payload:', util.inspect(data, {
        breakLength: Infinity
      }));
    };
    return NatsConnector;
  }());
  module.exports = NatsConnector;
}).call(this);
